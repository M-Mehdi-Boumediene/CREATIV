<?php

namespace Cosanit\CosanitBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ProduitsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProduitsRepository extends EntityRepository
{
    public function findAlldesc(){
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->innerJoin('u.categories', 'b')
            ->where('b.inter = :inter')
            ->orderBy('u.id','DESC')
        ->setParameter('inter',0);

        return $qb->getQuery()->getResult();
    }
    public function findByAll(){
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->innerJoin('u.categories', 'b')
            ->where('b.inter = :inter')
            ->orderBy('u.id','DESC')
            ->setParameter('inter',0);
        return $qb->getQuery()->getResult();
    }

    public function ByVillesInter($id){
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->innerJoin('u.categories', 'b')
            ->where('b.inter = :inter')
            ->andWhere('b.slug = :id')
            ->orderBy('u.id','DESC')
            ->setParameter('inter',1)
            ->setParameter('id',$id);
        return $qb->getQuery()->getResult();
    }

    public function findByExclusiveInter($id){
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->innerJoin('u.categories', 'b')
            ->where('u.exclusive = :id')
            ->andWhere('b.slug = :ville')
            ->andWhere('b.inter = :inter')
            ->orderBy('u.id','DESC')
            ->setParameter('id','oui')
            ->setParameter('ville',$id)
            ->setParameter('inter',1);

        return $qb->getQuery()->getResult();
    }
    public function byCategorie($id){
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->leftJoin('u.categories', 'c')
            ->where('c.slug = :id')
            ->orderBy('u.id','ASC')
            ->setParameter('id',$id);
        return $qb->getQuery()->getResult();
    }
    public function findByCuisine(){
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->leftJoin('u.categories', 'c')
            ->where('c.id = 1')
            ->setMaxResults('3')
            ->orderBy('u.id','DESC');

        return $qb->getQuery()->getResult();
    }
    public function findByCuisineAll(){
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->leftJoin('u.categories', 'c')
            ->where('c.id = 1')
            ->orderBy('u.id','DESC');

        return $qb->getQuery()->getResult();
    }
    public function findByPorte(){
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->leftJoin('u.categories', 'c')
            ->where('c.id = 2')
            ->setMaxResults('3')
            ->orderBy('u.id','ASC');

        return $qb->getQuery()->getResult();
    }
    public function findByPorteAll(){
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->leftJoin('u.categories', 'c')
            ->where('c.id = 2')
            ->orderBy('u.id','ASC');

        return $qb->getQuery()->getResult();
    }
    public function findByBureau(){
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->leftJoin('u.categories', 'c')
            ->where('c.id = 3')
            ->setMaxResults('3')
            ->orderBy('u.id','DESC');

        return $qb->getQuery()->getResult();
    }
    public function findByBureauAll(){
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->leftJoin('u.categories', 'c')
            ->where('c.id = 3')
            ->orderBy('u.id','DESC');

        return $qb->getQuery()->getResult();
    }
    public function findByExclusive(){
        $qb = $this->createQueryBuilder('u')
            ->select('u')

            ->where('u.exclusive = :id')

            ->orderBy('u.id','DESC')
            ->setParameter('id','oui')
            ;

        return $qb->getQuery()->getResult();
    }
    public function findByExclusiveloc(){
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->innerJoin('u.categories', 'b')
            ->where('u.exclusive = :id')
            ->andWhere('u.type = :type')
            ->andWhere('b.inter = :inter')
            ->orderBy('u.id','DESC')
            ->setParameter('id','oui')
            ->setParameter('type','Location')
            ->setParameter('inter',0);

        return $qb->getQuery()->getResult();
    }
    public function ByTypes($id){
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->innerJoin('u.categories', 'b')
            ->leftJoin('u.types', 't')
            ->where('t.slug = :id')
            ->andWhere('b.inter = :inter')
            ->orderBy('u.id','DESC')

            ->setParameter('id',$id)
            ->setParameter('inter',0);
        ;
        return $qb->getQuery()->getResult();
    }
    public function ByVilles($ville){
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->innerJoin('u.categories', 'c')
            ->where('c.slug = :id')
            ->orderBy('u.id','DESC')
            ->setParameter('id',$ville);

        return $qb->getQuery()->getResult();
    }


    public function ByVillesExclusive($ville){
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->innerJoin('u.categories', 'c')
            ->where('c.slug = :id')

            ->andWhere('u.exclusive = :exclusive')
            ->orderBy('u.id','DESC')
            ->setParameter('exclusive','oui')
            ->setParameter('id',$ville);

        return $qb->getQuery()->getResult();
    }





    public function findByLocation(){
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->innerJoin('u.categories', 'b')
            ->where('u.type = :id')
            ->andWhere('b.inter = :inter')
            ->orderBy('u.id', 'DESC')
            ->setParameter('id','Location')
            ->setParameter('inter',0)

        ;
        return $qb->getQuery()->getResult();
    }
    public function AlaUne(){

        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->where('u.alaune = 1')
            ->setMaxResults(8)

            ;
        return $qb->getQuery()->getResult();
    }

    public function search($transaction, $duree,$ville){

        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->innerJoin('u.categories', 'b')
            ->Where('u.type = :type')
            ->andWhere('u.duree = :duree')
            ->andWhere('b.id = :ville')
            ->andWhere('b.inter = :inter')

            ->orderBy('u.id','DESC')


            ->setParameter('type',$transaction)
            ->setParameter('duree',$duree)
            ->setParameter('ville',$ville)
            ->setParameter('inter',0)




        ;
        return $qb->getQuery()->execute();
    }


    public function searchFiltre($ville,$type,$duree,$types,$exclusiv){

        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->innerJoin('u.categories', 'b')
            ->innerJoin('u.types', 't')
            ->Where('b.nom = :ville')
            ->andWhere('u.type = :type')
            ->andWhere('u.duree = :duree')
            ->andWhere('t.nom Like :types')
            ->andWhere('u.exclusive = :exclusiv')

            ->orderBy('u.id','DESC')

            ->setParameter('ville',$ville)
            ->setParameter('type',$type)
            ->setParameter('duree',$duree)
            ->setParameter('types', '%'.$types.'%')
            ->setParameter('exclusiv',$exclusiv)


        ;
        return $qb->getQuery()->execute();
    }

}
